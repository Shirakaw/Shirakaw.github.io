<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shirakawa</title>
  
  <subtitle>Shirakawa的blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-10T13:15:13.303Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>薄靖凯</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/12/10/als/"/>
    <id>http://yoursite.com/2018/12/10/als/</id>
    <published>2018-12-10T13:06:42.368Z</published>
    <updated>2018-12-10T13:15:13.303Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="title-ALS—推荐算法（copy某大佬思路）"><a href="#title-ALS—推荐算法（copy某大佬思路）" class="headerlink" title="title: ALS—推荐算法（copy某大佬思路）"></a>title: ALS—推荐算法（copy某大佬思路）</h2><p>1.0. 原理：我们将采用简单清晰的话语来解释推荐算法</p><p>1.1 你听说过推荐算法么<br>假如我是豆瓣的CEO，很多豆瓣的用户在豆瓣电影上都会对电影进行评分。那么根据这个评分数据，我们有可能知道这些用户除了自己评过分的电影之外还喜欢或讨厌哪些电影吗？这就是一个典型的推荐问题，解决这一类问题的算法被称为推荐算法。</p><p>1.2 什么是协同过滤<br>协同过滤的英文全称是Collaborative Filtering，简称CF。注意，这不是一款游戏！从字面上分析，协同就是寻找共同点，过滤就是筛选出优质的内容。</p><p>1.3 协同过滤的分类<br>一般来说，协同过滤推荐分为三种类型：</p><p>基于用户(user-based)的协同过滤，通过计算用户和用户的相似度找到跟用户A相似的用户B, C, D…再把这些用户喜欢的内容推荐给A；<br>基于物品(item-based)的协同过滤，通过计算物品和物品的相似度找到跟物品1相似的物品2, 3, 4…再把这些物品推荐给看过物品1的用户们；<br>基于模型(model based)的协同过滤。主流的方法可以分为：矩阵分解，关联算法，聚类算法，分类算法，回归算法，神经网络。<br>1.4 矩阵分解<br>矩阵分解 (decomposition, factorization)是将矩阵拆解为数个矩阵的乘积。比如豆瓣电影有m个用户，n个电影。那么用户对电影的评分可以形成一个m行n列的矩阵R，我们可以找到一个m行k列的矩阵U，和一个k行n列的矩阵I，通过U * I来得到矩阵R。</p><p>1.5 ALS<br>如果想通过矩阵分解的方法实现基于模型的协同过滤，ALS是一个不错的选择，其英文全称是Alternating Least Square，翻译过来是交替最小二乘法。假设用户为a，物品为b，评分矩阵为R(m, n)，可分解为用户矩阵U(k, m)和物品矩阵I(k, n)，其中m, n, k代表矩阵的维度。前方小段数学公式低能预警：</p><p>根据矩阵分解的定义，有<br>$R = U^{T} <em> I$<br>用MSE作为损失函数，为了方便化简，加法符号左侧的常数改为-1/2<br>$L = -\large\frac{1}{2}\normalsize\sum_{i=0}^{n}(R_{ai} - U^{T}{a} </em> I{i})^2$<br>对损失函数求U_a的一阶偏导数，那么<br>$\large\frac{dL}{dU_{a}}\normalsize=(R_{a} - U^{T}{a} <em> I) </em> I^{T}$<br>$\large\frac{dL}{dU{a}}\normalsize=I <em> (R^{T}{a} - I{T} </em> U_{a})$<br>令一阶偏导数等于0<br>$I <em> R^{T}{a} = I </em> I^{T} <em> U{a}$<br>$U{a} = (I </em> I^{T})^{-1} <em> I </em> R^{T}<em>{a}$<br>同理，可证<br>$I</em>{b} = (U <em> U^{T})^{-1} </em> U * R_{b}$<br>1.6 求解用户矩阵U和物品矩阵I<br>矩阵R是已知的，我们随机生成用户矩阵U，</p><p>利用1.5中的式5、R和U求出I<br>利用1.5中的式4、R和I求出U<br>如此交替地执行步骤1和步骤2，直到算法收敛或者迭代次数超过了最大限制，最终我们用RMSE来评价模型的好坏。</p><p>2..0实现篇<br>本人用全宇宙最简单的编程语言——Python实现了ALS算法，没有依赖任何第三方库，便于学习和使用。简单说明一下实现过程，更详细的注释请参考本人github上的代码。<br>注：代码中用到的Matrix类是我写的一个矩阵类，可以取出矩阵的行或列，计算矩阵的乘法、转置和逆。<br>2.1 创建ALS类<br>初始化，存储用户ID、物品ID、用户ID与用户矩阵列号的对应关系、物品ID与物品矩阵列号的对应关系、用户已经看过哪些物品、评分矩阵的Shape以及RMSE。</p><p>class ALS(object):<br>    def <strong>init</strong>(self):<br>        self.user_ids = None<br>        self.item_ids = None<br>        self.user_ids_dict = None<br>        self.item_ids_dict = None<br>        self.user_matrix = None<br>        self.item_matrix = None<br>        self.user_items = None<br>        self.shape = None<br>        self.rmse = None<br>2.2 数据预处理<br>对训练数据进行处理，得到用户ID、物品ID、用户ID与用户矩阵列号的对应关系、物品ID与物品矩阵列号的对应关系、评分矩阵的Shape、评分矩阵及评分矩阵的转置。</p><p>def _process_data(self, X):<br>    self.user_ids = tuple((set(map(lambda x: x[0], X))))<br>    self.user_ids_dict = dict(map(lambda x: x[::-1],<br>                                    enumerate(self.user_ids)))</p><pre><code>self.item_ids = tuple((set(map(lambda x: x[1], X))))self.item_ids_dict = dict(map(lambda x: x[::-1],                                enumerate(self.item_ids)))self.shape = (len(self.user_ids), len(self.item_ids))ratings = defaultdict(lambda: defaultdict(int))ratings_T = defaultdict(lambda: defaultdict(int))for row in X:    user_id, item_id, rating = row    ratings[user_id][item_id] = rating    ratings_T[item_id][user_id] = ratingerr_msg = &quot;Length of user_ids %d and ratings %d not match!&quot; % (    len(self.user_ids), len(ratings))assert len(self.user_ids) == len(ratings), err_msgerr_msg = &quot;Length of item_ids %d and ratings_T %d not match!&quot; % (    len(self.item_ids), len(ratings_T))assert len(self.item_ids) == len(ratings_T), err_msgreturn ratings, ratings_T</code></pre><p>2.3 用户矩阵乘以评分矩阵<br>实现稠密矩阵与稀疏矩阵的矩阵乘法，得到用户矩阵与评分矩阵的乘积。</p><p>def _users_mul_ratings(self, users, ratings_T):</p><pre><code>def f(users_row, item_id):    user_ids = iter(ratings_T[item_id].keys())    scores = iter(ratings_T[item_id].values())    col_nos = map(lambda x: self.user_ids_dict[x], user_ids)    _users_row = map(lambda x: users_row[x], col_nos)    return sum(a * b for a, b in zip(_users_row, scores))ret = [[f(users_row, item_id) for item_id in self.item_ids]        for users_row in users.data]return Matrix(ret)</code></pre><p>2.4 物品矩阵乘以评分矩阵<br>实现稠密矩阵与稀疏矩阵的矩阵乘法，得到物品矩阵与评分矩阵的乘积。</p><p>def _items_mul_ratings(self, items, ratings):</p><pre><code>def f(items_row, user_id):    item_ids = iter(ratings[user_id].keys())    scores = iter(ratings[user_id].values())    col_nos = map(lambda x: self.item_ids_dict[x], item_ids)    _items_row = map(lambda x: items_row[x], col_nos)    return sum(a * b for a, b in zip(_items_row, scores))ret = [[f(items_row, user_id) for user_id in self.user_ids]        for items_row in items.data]return Matrix(ret)</code></pre><p>2.5 生成随机矩阵<br>def _gen_random_matrix(self, n_rows, n_colums):<br>    data = [[random() for _ in range(n_colums)] for _ in range(n_rows)]<br>    return Matrix(data)<br>2.6 计算RMSE<br>def _get_rmse(self, ratings):<br>        m, n = self.shape<br>        mse = 0.0<br>        n_elements = sum(map(len, ratings.values()))<br>        for i in range(m):<br>            for j in range(n):<br>                user_id = self.user_ids[i]<br>                item_id = self.item_ids[j]<br>                rating = ratings[user_id][item_id]<br>                if rating &gt; 0:<br>                    user_row = self.user_matrix.col(i).transpose<br>                    item_col = self.item_matrix.col(j)<br>                    rating_hat = user_row.mat_mul(item_col).data[0][0]<br>                    square_error = (rating - rating_hat) <strong> 2<br>                    mse += square_error / n_elements<br>        return mse </strong> 0.5<br>2.7 训练模型<br>数据预处理<br>变量k合法性检查<br>生成随机矩阵U<br>交替计算矩阵U和矩阵I，并打印RMSE信息，直到迭代次数达到max_iter<br>保存最终的RMSE<br>def fit(self, X, k, max_iter=10):<br>    ratings, ratings_T = self._process_data(X)<br>    self.user_items = {k: set(v.keys()) for k, v in ratings.items()}<br>    m, n = self.shape</p><pre><code>error_msg = &quot;Parameter k must be less than the rank of original matrix&quot;assert k &lt; min(m, n), error_msgself.user_matrix = self._gen_random_matrix(k, m)for i in range(max_iter):    if i % 2:        items = self.item_matrix        self.user_matrix = self._items_mul_ratings(            items.mat_mul(items.transpose).inverse.mat_mul(items),            ratings        )    else:        users = self.user_matrix        self.item_matrix = self._users_mul_ratings(            users.mat_mul(users.transpose).inverse.mat_mul(users),            ratings_T        )    rmse = self._get_rmse(ratings)    print(&quot;Iterations: %d, RMSE: %.6f&quot; % (i + 1, rmse))self.rmse = rmse</code></pre><p>2.8 预测一个用户<br>预测一个用户感兴趣的内容，剔除用户已看过的内容。然后按感兴趣分值排序，取出前n_items个内容。</p><p>def _predict(self, user_id, n_items):<br>    users_col = self.user_matrix.col(self.user_ids_dict[user_id])<br>    users_col = users_col.transpose</p><pre><code>items_col = enumerate(users_col.mat_mul(self.item_matrix).data[0])items_scores = map(lambda x: (self.item_ids[x[0]], x[1]), items_col)viewed_items = self.user_items[user_id]items_scores = filter(lambda x: x[0] not in viewed_items, items_scores)return sorted(items_scores, key=lambda x: x[1], reverse=True)[:n_items]</code></pre><p>2.9 预测多个用户<br>循环调用2.8，预测多个用户感兴趣的内容。</p><p>def predict(self, user_ids, n_items=10):<br>    return [self._predict(user_id, n_items) for user_id in user_ids]<br>3 效果评估<br>3.1 main函数<br>使用电影评分数据集，训练模型并统计RMSE。</p><p>@run_time<br>def main():<br>    print(“Tesing the accuracy of ALS…”)</p><pre><code>X = load_movie_ratings()model = ALS()model.fit(X, k=3, max_iter=5)print()print(&quot;Showing the predictions of users...&quot;)user_ids = range(1, 5)predictions = model.predict(user_ids, n_items=2)for user_id, prediction in zip(user_ids, predictions):    _prediction = [format_prediction(item_id, score)                   for item_id, score in prediction]    print(&quot;User id:%d recommedation: %s&quot; % (user_id, _prediction))</code></pre><p>总结<br>ALS的原理：鸡生蛋、蛋生鸡</p><p>ALS的实现：基本上就是矩阵乘法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;title-ALS—推荐算法（copy某大佬思路）&quot;&gt;&lt;a href=&quot;#title-ALS—推荐算法（copy某大佬思路）&quot; class=&quot;headerlink&quot; title=&quot;title: ALS—推荐算法（copy某大佬思路）&quot;&gt;&lt;/a&gt;title
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo 常见错误</title>
    <link href="http://yoursite.com/2018/12/08/hexo-%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
    <id>http://yoursite.com/2018/12/08/hexo-常见错误/</id>
    <published>2018-12-08T10:00:24.000Z</published>
    <updated>2018-12-08T10:00:24.875Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/12/06/Shirakawa/"/>
    <id>http://yoursite.com/2018/12/06/Shirakawa/</id>
    <published>2018-12-06T02:26:14.146Z</published>
    <updated>2018-12-06T13:53:02.862Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: Shirakawa<br>date: 2018-12-06 10:26:14</p><h2 id="tags-经过几天的熬夜奋战，在知乎，google的指导，廖老板不停的找bug的帮助下我终于完成了以gitihub为主机，以hexo为博客框架的个人博客我想我的第一篇博客内容必须要讲述Github-hexo搭建个人博客可能出现的bug。"><a href="#tags-经过几天的熬夜奋战，在知乎，google的指导，廖老板不停的找bug的帮助下我终于完成了以gitihub为主机，以hexo为博客框架的个人博客我想我的第一篇博客内容必须要讲述Github-hexo搭建个人博客可能出现的bug。" class="headerlink" title="tags:经过几天的熬夜奋战，在知乎，google的指导，廖老板不停的找bug的帮助下我终于完成了以gitihub为主机，以hexo为博客框架的个人博客我想我的第一篇博客内容必须要讲述Github+hexo搭建个人博客可能出现的bug。"></a>tags:经过几天的熬夜奋战，在知乎，google的指导，廖老板不停的找bug的帮助下我终于完成了以gitihub为主机，以hexo为博客框架的个人博客我想我的第一篇博客内容必须要讲述Github+hexo搭建个人博客可能出现的bug。</h2><p><a href="http://i1.bvimg.com/671082/c3f0f9ac54356b51.jpg" target="_blank" rel="noopener">Shirakawa</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;title: Shirakawa&lt;br&gt;date: 2018-12-06 10:26:14&lt;/p&gt;
&lt;h2 id=&quot;tags-经过几天的熬夜奋战，在知乎，google的指导，廖老板不停的找bug的帮助下我终于完成了以gitihub为主机，以hexo为博客框架的个人
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/12/06/hello-world/"/>
    <id>http://yoursite.com/2018/12/06/hello-world/</id>
    <published>2018-12-05T16:20:07.583Z</published>
    <updated>2018-12-06T13:21:44.874Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="title-Hello-World"><a href="#title-Hello-World" class="headerlink" title="title: Hello World"></a>title: Hello World</h2><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;title-Hello-World&quot;&gt;&lt;a href=&quot;#title-Hello-World&quot; class=&quot;headerlink&quot; title=&quot;title: Hello World&quot;&gt;&lt;/a&gt;title: Hello World&lt;/h2&gt;&lt;p&gt;Wel
      
    
    </summary>
    
    
  </entry>
  
</feed>
